// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package releaseswatcher

import (
	"fmt"
	"github.com/joho/godotenv"
	"os"
)

// Injectors from wire.go:

func initializeApp(connection ConnectionString, token MusicBrainzToken, root RootPath) (Application, error) {
	pool, err := NewPgxPool(connection)
	if err != nil {
		return Application{}, err
	}
	db, err := NewDB(pool)
	if err != nil {
		return Application{}, err
	}
	cache := NewCache(pool)
	musicBrainzLibrary, err := NewMusicBrainzLibrary(token, db, cache)
	if err != nil {
		return Application{}, err
	}
	watcher, err := NewWatcher(root, db, musicBrainzLibrary)
	if err != nil {
		return Application{}, err
	}
	differ := NewDiffer(db)
	application := NewApplication(db, watcher, differ)
	return application, nil
}

// wire.go:

type Application struct {
	DB      DB
	Watcher Watcher
	Differ  Differ
}

func NewApplication(
	db DB,
	watcher Watcher,
	differ Differ,
) Application {
	return Application{
		DB:      db,
		Watcher: watcher,
		Differ:  differ,
	}
}

func InitializeApplication() (Application, error) {
	err := godotenv.Load()
	if err != nil {
		return Application{}, fmt.Errorf("error loading .env file: %w", err)
	}

	connectionString := ConnectionString(os.Getenv("PGCONNECTION"))
	if connectionString == "" {
		return Application{}, fmt.Errorf("provide a connection string PGCONNECTION")
	}
	musicbrainzToken := MusicBrainzToken(os.Getenv("MUSICBRAINZ_TOKEN"))
	if musicbrainzToken == "" {
		return Application{}, fmt.Errorf("provide a MUSICBRAINZ_TOKEN")
	}
	root := RootPath(os.Getenv("ROOT"))
	if root == "" {
		return Application{}, fmt.Errorf("provide a ROOT")
	}

	app, err := initializeApp(connectionString, musicbrainzToken, root)
	if err != nil {
		return Application{}, fmt.Errorf("app initialization error: %w", err)
	}

	return app, nil
}
